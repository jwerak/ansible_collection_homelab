---
- name: Set Backup server host
  ansible.builtin.set_fact:
    __backup_server_name: "{{ groups[backup_server_groupname][0] }}"
    __backup_dest: "{{ backup_rsync_base_path }}/{{ ansible_host }}"

- name: Get backup user info
  ansible.builtin.user:
    name: "{{ backup_server_user }}"
    generate_ssh_key: true
  register: backup_user
  delegate_to: "{{ __backup_server_name }}"

- name: Install rpm packages on ostree based os
  community.general.rpm_ostree_pkg:
    name:
      - rsync
    state: present
  notify: Reboot linux server

- name: Copy backup user ssh keys to remote host
  ansible.posix.authorized_key:
    user: "{{ backup_remote_user }}"
    state: present
    key: "{{ backup_user.ssh_public_key }}"

- name: Create backup script directory
  ansible.builtin.file:
    state: directory
    path: "{{ backup_scripts_path }}"
    owner: "{{ backup_user.name }}"
    mode: 0750
  delegate_to: "{{ __backup_server_name }}"

- name: Ensure backup dest directory exists
  ansible.builtin.file:
    state: directory
    path: "{{ __backup_dest }}"
    owner: "{{ backup_user.name }}"
    mode: 0770
  delegate_to: "{{ __backup_server_name }}"

- name: Create rsync backup script
  ansible.builtin.copy:
    dest: "{{ __backup_rsync_script_path }}"
    content: |
      #!/bin/bash
      rsync -az -e "ssh -o StrictHostKeyChecking=no" {{ backup_remote_user }}@{{ ansible_host }}:{{ backup_dirs | join(' :') }} {{ __backup_dest }}
    owner: "{{ backup_user.group }}"
    group: "{{ backup_user.name }}"
    mode: 0550
  delegate_to: "{{ __backup_server_name }}"

- name: Ensure base systemd units path for user backup exists
  ansible.builtin.file:
    path: "{{ __backup_user_systemd_basepath }}"
    owner: "{{ backup_user.name }}"
    state: directory
    mode: 0750
  delegate_to: "{{ __backup_server_name }}"

- name: Create systemd unit to backup script
  ansible.builtin.copy:
    dest: "{{ __backup_rsync_backup_systemd_base }}.service"
    content: |
      [Unit]
      Description=A job to run rsync backup for {{ inventory_hostname }}

      [Service]
      Type=simple
      ExecStart={{ __backup_rsync_script_path }}

      [Install]
      WantedBy=default.target
    owner: "{{ backup_user.name }}"
    mode: 420
  delegate_to: "{{ __backup_server_name }}"
  notify: Reload systemd for user scope

- name: Create systemd timer to trigger systemd backup service weekly
  ansible.builtin.copy:
    dest: "{{ __backup_rsync_backup_systemd_base }}.timer"
    content: |
      [Unit]
      Description=Schedule a weekly backup

      [Timer]
      Unit=rsync-backup-{{ inventory_hostname }}.service
      OnUnitActiveSec=1w
      Persistent=true

      [Install]
      WantedBy=timers.target
    owner: "{{ backup_user.name }}"
    group: root
    mode: 420
  delegate_to: "{{ __backup_server_name }}"
  notify: Reload systemd for user scope

- name: Trigger pending handlers
  ansible.builtin.meta: flush_handlers

- name: Enable systemd service rsync-backup-{{ inventory_hostname }}
  ansible.builtin.systemd:
    name: rsync-backup-{{ inventory_hostname }}.service
    enabled: true
    scope: user
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ backup_user.uid }}"
  delegate_to: "{{ __backup_server_name }}"
  become_user: "{{ backup_user.name }}"

- name: Enable and start systemd timer rsync-backup-{{ inventory_hostname }}
  ansible.builtin.systemd:
    name: rsync-backup-{{ inventory_hostname }}.timer
    enabled: true
    state: started
    scope: user
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ backup_user.uid }}"
  delegate_to: "{{ __backup_server_name }}"
  become_user: "{{ backup_user.name }}"
